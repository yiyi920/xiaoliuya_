/***************************************************************************************************************/
最基础的知识，细节不能出错.
/***************************************************************************************************************/
这样的input可以表示成：
Input: nums [1, 1, 1, 1, 2, 2, 2]

List<Integer> nums  ---》 nums.size()/2
int[] nums ----》 nums.length/2

如果用List<Integer>表示的， ArrayList<Integer>--》 int num = nums.get(pivot);
/***************************************************************************************************************/
如何loop through hash

for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
    if (entry.getValue() > halfLen) {
        return entry.getKey();
    }
}


/***************************************************************************************************************/

int min = Integer.MAX_VALUE;
Math.min

/***************************************************************************************************************/
讲明白PriorityQueue
minHeap --》 先出来的最小 -->s升序
maxheap --》降序---》先出来最大

public static void main(String[] args) {
        //这是升序 apple，PineApple，Custard Apple,
        //默认是minheap，输出顺序1->2->3
        PriorityQueue<String> pq=
                new PriorityQueue<String>(5, (a,b) -> a.compareTo(b));
        //a.compareTo(b)
        //apple -> custard-> pineApple
        
        /*
        PriorityQueue<String> pq=
                new PriorityQueue<String>(5, (a,b) -> a.length() - b.length());
        // or pq = new PriorityQueue<String>(5, Comparator.comparing(String::length));

        */
        pq.add("Apple");
        pq.add("PineApple");
        pq.add("Custard Apple");

        PriorityQueue<Integer> pq_nums=
                new PriorityQueue<Integer>(5, (a,b) -> a - b);
        PriorityQueue<Integer> pq_nums1=
                new PriorityQueue<>();
        PriorityQueue<Integer> pq_nums2=
                new PriorityQueue<Integer>(5, (a,b) -> b - a);
        pq_nums.add(1);
        pq_nums.add(2);
        pq_nums.add(3);
        pq_nums1.add(1);
        pq_nums1.add(2);
        pq_nums1.add(3);
        pq_nums2.add(1);
        pq_nums2.add(2);
        pq_nums2.add(3);

        while (pq.size() != 0)
        {
            System.out.println(pq.poll());
        }
        while (pq_nums.size() != 0)
        {
            System.out.println(pq_nums.poll());
        }
        while (pq_nums1.size() != 0)
        {
            System.out.println("---------------------");
            System.out.println(pq_nums1.poll());
        }
        while (pq_nums2.size() != 0)
        {
            System.out.println("---------------------");
            System.out.println(pq_nums2.poll());
        }
    }
    
/***************************************************************************************************************/
    How do I efficiently iterate over each entry in a Java Map?
    Map<String, String> map = ...
    for (Map.Entry<String, String> entry : map.entrySet()) {
        System.out.println(entry.getKey() + "/" + entry.getValue());
    }
    
https://stackoverflow.com/questions/46898/how-do-i-efficiently-iterate-over-each-entry-in-a-java-map


    
