
https://www.lintcode.com/problem/letter-combinations-of-a-phone-number/description

/*
425. Letter Combinations of a Phone Number
combination的模板---找题目练习和举例子

1.用String array存所有字母，对每个letter进行permutation
2.DFS 的本质，是模拟嵌套for循环。
3.记下dfs状态方法：三种
  a. 把所有记录状态的参数，全部写到函数里面,枚举型的，尽量用这种，就跟写for loop一样.
  b. 中间不改变的量，可以不放到函数里面.-----不推荐
  c.
举例子：

private void dfs(int x, int l, String str, String digits, String phone[], List<String> ans) {
        if (x == l) {
            ans.add(str);
            return;
        }
        int d = digits.charAt(x) - '0'; 强制换int
        for (char c : phone[d].toCharArray()) {
            dfs(x + 1, l, str + c, digits, phone, ans);
        }
    }


*   
*
*/    
public class Solution {
    /**
     * @param digits: A digital string
     * @return: all posible letter combinations
     */
    String[] KEYBOARD = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
     
    public List<String> letterCombinations(String digits) {
        // write your code here
        List<String> results = new ArrayList<>();
        if(digits == null || digits.equals("")) {
            return results;
        }
        
        StringBuilder sb = new StringBuilder();
        dfs(digits, sb, results, 0);
        return results;
    }
    
    private void dfs(String digits, StringBuilder sb, List<String> results, int index) {
        if(digits.length() == index) {
            results.add(sb.toString());
            return;
        }
        
        
        for(char c : KEYBOARD[Character.getNumericValue(digits.charAt(index))].toCharArray()) {
            sb.append(c);
            dfs(digits, sb, results, index+1);
           sb.deleteCharAt(sb.length()-1);
        }
    }
}

DFS，改自Permutation模板。每次拿出当前要处理的数字digitChars[startIndex]，遍历对应的字母（3或4种可能）。
这道题不需要考虑重复元素，也不需要考虑是否已经visit（一直向后访问即可）。

///////////// version: 高频题班
这用的a，然后➕模拟嵌套for循环
public class Solution {
    /**
     * @param digits: A digital string
     * @return: all posible letter combinations
     */
    public List<String> letterCombinations(String digits) {
    //首先预处理操作
        String[] phone = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

        List<String> ans = new ArrayList<>();
        if (digits.length() == 0 || digits == null) {
            return ans;
        }

        dfs(0, digits.length(), "", digits, phone, ans);
        return ans;
    }
    
    //相当于模拟for loop， x： start index，l endindex 一共，一共有l层，x层是第x层循环


    private void dfs(int x, int l, String str, String digits, String phone[], List<String> ans) {
        if (x == l) {//出口，最后一层
            ans.add(str);
            return;
        }
        int d = digits.charAt(x) - '0'; //例如字符2 - ’0‘得到的是数字2.，下一层就是x+1层.
        for (char c : phone[d].toCharArray()) {
            dfs(x + 1, l, str + c, digits, phone, ans);
            //不需要回溯的原因是，x层的str和第x+1层的str不是一个东西，利用了String的Immutable的性质，免去了回溯的步骤
        }
    }
}

有时候变量太大的情况下，可以把str变成数组类型的
StringBuilder sb ---相当是数组，如果变回去需要 sb.toString();
 
核心部for (int j = 0; j < letters.length; j++) {
    sb.append(letters[j]);
    helper(arr, index + 1, map, sb, result);
    sb.deleteCharAt(sb.length() - 1);
}


第二题：
word
先判断是不是
https://www.lintcode.com/problem/valid-word-square/description
public class Solution {
    /**
     * @param words: a list of string
     * @return: a boolean
     */
    public boolean validWordSquare (String[] words) {
        // write your code here
        if (words.length != words[0].length()) return false;
        for (int i = 0; i < words.length; ++i) {
            for (int j = 0; j < words[i].length(); ++j) {
                if (j >= words.length || i >= words[j].length() || 
                words[i].charAt (j) != words[j].charAt (i)) {
                    return false;
                }
            }
        }
        return true;
    }
}

https://www.lintcode.com/problem/word-squares/description


剪枝：
1.要去掉冗余

// version: 高频题班
public class Solution {
    /**
     * @param words a set of words without duplicates
     * @return all word squares
     */

    void initPrefix(String[] words, Map<String, List<String>> hash) {
        for (String item : words) {
            hash.putIfAbsent("", new ArrayList<>());
            hash.get("").add(item);

            String prefix = "";
            for (char c : item.toCharArray()) {
                prefix += c;
                hash.putIfAbsent(prefix, new ArrayList<>());
                hash.get(prefix).add(item);
            }
        }
    }

    boolean checkPrefix(int l, String nextWord, int wordLen, Map<String, List<String>> hash, List<String> squares) {
        for (int j = l + 1; j < wordLen; j++) {
            String prefix = "";
            for (int k = 0; k < l; k++) {
                prefix += squares.get(k).charAt(j);
            }
            prefix += nextWord.charAt(j);
            if (!hash.containsKey(prefix)) {
                return false;
            }
        }
        return true;
    }

    void dfs(int l, int wordLen, Map<String, List<String>> hash, List<String> squares, List<List<String>> ans) {
        if (l == wordLen) {
            ans.add(new ArrayList<>(squares));
            return;
        }
        String prefix = "";
        for (int i = 0; i < l; i++) {
            prefix += squares.get(i).charAt(l);
        }

        for (String item : hash.get(prefix)) {
            if (!checkPrefix(l, item, wordLen, hash, squares)) {
                continue;
            }
            squares.add(item);
            dfs(l + 1, wordLen, hash, squares, ans);
            squares.remove(squares.size() - 1);
        }
    }

    public List<List<String>> wordSquares(String[] words) {
        // Write your code here
        List<List<String>> ans = new ArrayList<>();
        if (words.length == 0) {
            return ans;
        }
        Map<String, List<String>> hash = new HashMap<>();
        initPrefix(words, hash);

        List<String> squares = new ArrayList<>();
        dfs(0, words[0].length(), hash, squares, ans);
        return ans;
    }
}
      
        
