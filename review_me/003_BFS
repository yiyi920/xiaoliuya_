https://www.lintcode.com/problem/surrounded-regions/description
//矩阵上的？

思路：
X是平原，O是盆地，盆地是注水用的
Input:
  X X X X
  X O O X
  X X O X
  X O X X
----》

  X X X X
  X 1 1 X
  X X 1 X
  X 1 X X
 要逆向思维，完全被围绕比较难，---找到没有被平原围绕。特点就是O有一个是连着矩阵的边
  

// version: 高频题班
public class Solution {

    public void surroundedRegions(char[][] board) {
        // Write your code here
        int n = board.length;
        if (n == 0) {
            return;
        }
        int m = board[0].length;

        for (int i = 0; i < n; i++) {
            bfs(board, i, 0);
            bfs(board, i, m - 1);
        }
        for (int j = 0; j < m; j++) {
            bfs(board, 0, j);
            bfs(board, n - 1, j);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'W') {
                    board[i][j] = 'O';
                } else {
                    board[i][j] = 'X';
                }
            }
        }
    }

    void bfs(char[][] board, int sx, int sy) {
        if (board[sx][sy] != 'O') {
            return;
        }
        int n = board.length;
        int m = board[0].length;
        int[] dx = { 0, 1, 0, -1 };
        int[] dy = { 1, 0, -1, 0 };

        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        qx.offer(sx);
        qy.offer(sy);
        board[sx][sy] = 'W'; // 'W' -> Water
        while (!qx.isEmpty()) {
            int cx = qx.poll();
            int cy = qy.poll();

            for (int i = 0; i < 4; i++) {
                int nx = cx + dx[i];
                int ny = cy + dy[i];
                if (0 <= nx && nx < n && 0 <= ny && ny < m && board[nx][ny] == 'O') {
                    board[nx][ny] = 'W'; // 'W' -> Water
                    qx.offer(nx);
                    qy.offer(ny);
                }
            }
        }
    }
}

棋盘类的问题，千万别用dfs

https://www.lintcode.com/problem/walls-and-gates/description

shortest path, bfs
谁是盆地，谁是平原，谁是注水点
所有的0，集合，就是超级原点--》转成单原点，多终点的最短路径.

/*
用bfs来解决此问题。
一开始将所有的门push到队列中，然后bfs遍历整张图即可。
*/
public class Solution {
    /**
     * @param rooms m x n 2D grid
     * @return nothing
     */

    public void wallsAndGates(int[][] rooms) {
        // Write your code here
        int n = rooms.length;
        if (n == 0) {
            return;
        }
        int m = rooms[0].length;

        int dx[] = {0, 1, 0, -1};
        int dy[] = {1, 0, -1, 0};

        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (rooms[i][j] == 0) {
                    qx.offer(i);
                    qy.offer(j);
                }
            }
        }

        while (!qx.isEmpty()) {
            int cx = qx.poll();
            int cy = qy.poll();

            for (int i = 0; i < 4; i++) {
                int nx = cx + dx[i];
                int ny = cy + dy[i];
                if (0 <= nx && nx < n && 0 <= ny && ny < m
                        && rooms[nx][ny] == Integer.MAX_VALUE) {
                    qx.offer(nx);
                    qy.offer(ny);
                    rooms[nx][ny] = rooms[cx][cy] + 1;
                }
            }
        }
    }
}
