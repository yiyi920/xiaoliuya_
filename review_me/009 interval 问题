interval
这是一个通用的算法，就是遇到任何interval，将interval的start当成key存入，value+1，遇到end，存入。但是要-1；
用一个TreeMap存储，保证key的值是sort的。
时间复杂度是O(N)
该方法可以用于如何calendar以及meeting room的题解。

首先研究下。。interval怎么给的问题。。。

这是一个通用的算法，就是遇到任何interval，将interval的start当成key存入，value+1，遇到end，存入。但是要-1；
用一个TreeMap存储，保证key的值是sort的。
时间复杂度是O(N)
该方法可以用于如何calendar以及meeting room的题解。

-----
我的看法：
经典的扫描线算法题

public int minMeetingRooms(List<Interval> intervals) {
        TreeMap<Integer, Integer> tmap = new TreeMap<>();
        int ans = 0, cnt = 0;
        for (Interval i : intervals) {
            int start = i.start, end = i.end;
            tmap.put(start, tmap.getOrDefault(start, 0) + 1);
            tmap.put(end, tmap.getOrDefault(end, 0) - 1);
        }
        for (int k : tmap.keySet()) {
            cnt += tmap.get(k);
            ans = Math.max(ans, cnt);
        }
        return ans;
}

对待2维数组的

(int[][] intervals) {
        Comparator<int[]> c=(int[] a, int[] b) -> (a[0]-b[0]);
        Arrays.sort(intervals, c);
        
        
首先从最基本的题目开始，merge interval
1.考点，考察排序
2.考察怎么应对不一样的输入。

-->这些题目可以总结成一些了的，sweep line

首先从输入的角度讲：

56. Merge Intervals
Given a collection of intervals, merge all overlapping intervals.

Example 1:

Input: [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.


defalut input：

class Solution {
    public int[][] merge(int[][] intervals) {
        
    }
}


class Solution {
	public int[][] merge(int[][] intervals) {
		if (intervals.length <= 1)
			return intervals;

		// Sort by ascending starting point
		//Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));
        Arrays.sort(intervals, (i1, i2) -> i1[0] - i2[0]);

        
		List<int[]> result = new ArrayList<>();
		int[] newInterval = intervals[0];
		result.add(newInterval);
		for (int[] interval : intervals) {
			if (interval[0] <= newInterval[1]) // Overlapping intervals, move the end if needed
				newInterval[1] = Math.max(newInterval[1], interval[1]);
			else {                             // Disjoint intervals, add the new interval to the list
				newInterval = interval;
				result.add(newInterval);
			}
		}

		return result.toArray(new int[result.size()][]);
	}
}
扫描线则是另外一种类型的区间求解的方法。一般遇到如下的几种类型的题目就适用扫描线Sweep Line来解题。
扫描线就是模拟用一根线去扫描区间，然后获取每个时间点的信息来解题。

a. 告诉你一些飞机的起飞和降落时间，问你最多能有几架飞机在同时在天上飞。

b. 给你一些会议的开始和结束时间，问你至少需要多少个会议室才能满足需求。

c. 告诉你火车的起始和到达时间，问你需要多少铁轨才能容纳所有的火车。

另外一种是segement tree

minHeap solution, looks like heap is a common solution for these overlapping problems

中文English
Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), 
find the minimum number of conference rooms required.

Example
Example1

Input: intervals = [(0,30),(5,10),(15,20)]
Output: 2
Explanation:
We need two meeting rooms
room1: (0,30)
room2: (5,10),(15,20)
Example2

Input: intervals = [(2,7)]
Output: 1
Explanation: 
Only need one meeting room

    public int minMeetingRooms(int[][] intervals) {
        Map<Integer, Integer> m = new TreeMap<>();
        for (int[] t : intervals) {
            m.put(t[0], m.getOrDefault(t[0], 0) + 1);
            m.put(t[1], m.getOrDefault(t[1], 0) - 1);
        }
        int res = 0, cur = 0;
        for (int v : m.values()) {
            res = Math.max(res, cur += v);
        }
        return res;
    }
    
    不是很理解。。
    
    https://www.lintcode.com/problem/meeting-rooms-ii/description
