Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"
Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

// BFS来求serialize.
// 注意, 这里我们把null的node也offer到queue里用来占位. 
//占位符号为"#".
// 在serialize的时候, 最后一位"}"会多一个",". 
//可以删除掉也可以在while中不加最后一位.
// 注意, 最后会多出几个"#", 可以删除, 也可以保留在serialize后的string中.
// 在deserialize的时候, 如果当前位是非"#", 则是有效node. 
// 通过一个boolean isLeftChild来判断需要把当前node变为左child还是右child.
// 同样通过这个变量来控制什么时候poll出queue中的node.

public class Solution {
    /**
     * This method will be invoked first, you should
     * design your own algorithm 
     * to serialize a binary tree which denote
     * by a root node to a string which
     * can be easily deserialized by your own 
     * "deserialize" method later.
     */
    public String serialize(TreeNode root) {
        // write your code here
        if (root == null) {
            return "{}";
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        queue.offer(root);
        sb.append("{");
        
        while (!queue.isEmpty()) {
            TreeNode head = queue.poll();
            if (head == null) {
                sb.append("#");
            } else {
                sb.append(head.val);
                queue.offer(head.left);
                queue.offer(head.right);
            }
            
            if (!queue.isEmpty()) {
                sb.append(",");
            }
        }
        
        sb.append("}");
        return sb.toString();
    }

    /**
     * This method will be invoked second, the 
     * argument data is what exactly
     * you serialized at method "serialize", that means
     * the data is not given by
     * system, it's given by your own serialize method. 
     * So the format of data is
     * designed by yourself, and deserialize it here 
     * as you serialize it in 
     * "serialize" method.
     */
    public TreeNode deserialize(String data) {
        // write your code here
        if (data == null || data.equals("{}")) {
            return null;
        }
        
        String[] val = data.substring(1, data.length() - 1).split(",");
        TreeNode root = new TreeNode(Integer.parseInt(val[0]));
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        boolean isLeftChild = true;
        
        for (int i = 1; i < val.length; i++) {
            if (!val[i].equals("#")) {
                TreeNode child = new TreeNode(Integer.parseInt(val[i]));
                if (isLeftChild) {
                    queue.peek().left = child;
                } else {
                    queue.peek().right = child;
                }
                
                queue.offer(child);
            }
            
            if (!isLeftChild) {
                queue.poll();
            }
            isLeftChild = !isLeftChild;
        }
        
        return root;
    }
}
