https://www.lintcode.com/problem/valid-tic-tac-toe-state/description

public class Solution {
    /**
     * @param board: the given board
     * @return: True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game
     */
    public boolean validTicTacToe(String[] board) {
        //count(X)= count(O) or count(0)+1 
        int countX = getCount(board, 'X');
        int countO = getCount(board, 'O');
        if (countX != countO && countX != countO + 1)  return false;
        
        //check multiple wins
        int xWin =countWin(board,  'X');
        int oWin = countWin(board,  'O');
        if (xWin + oWin > 1) return false;
        if (xWin == 1 && countX == countO) return false;
        if (oWin == 1 && countX == countO+1) return false;
        return true;
    }
    
    public int countWin(String[] board, char c) {
        int count = 0;
        for (int i=0; i<board.length; i++) {
            if (board[i].equals( c+""+c+c)){
                count++;
            }
            if (board[0].charAt(i) ==c && board[1].charAt(i)==c && board[2].charAt(i) ==c) {
                count++;
            }
        }
        if (board[0].charAt(0) ==c && board[1].charAt(1) ==c&& board[2].charAt(2) ==c) count++;
        if (board[0].charAt(2) ==c && board[1].charAt(1) ==c&& board[2].charAt(0) ==c) count++;
        return count;
        
    }
    
    public int getCount(String[] board, char c) {
        int count = 0;
        for (int i=0; i< board.length; i++) {
            for (int j=0; j<board[i].length();j++){
                if (board[i].charAt(j) == c){
                    count++;
                }
            }
        }
        return count;
    }
}
