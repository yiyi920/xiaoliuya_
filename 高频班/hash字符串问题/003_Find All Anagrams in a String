/*
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 40,000.

The order of output does not matter.

Example
Example 1:

Input : s =  "cbaebabacd", p = "abc"
Output : [0, 6]
Explanation : 
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
*/

/*
1. 怎么loop，一段一段的string
2. 见到string -》好的习惯是直接转换，这样可以避免用charAt（）
char[] sc = s.toCharArray();
char[] pc = p.toCharArray();

1.可以枚举所有的substring，然后在用判断，每一个是不是
2.升级做法，用silding window
判断个数。
*/

//会超时

public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if (p == null || s == null || s.length() < p.length()) return res;
        int m = s.length(), n = p.length();
        for (int i = 0; i < m-n+1; i++) {
            String cur = s.substring(i, i+n);
            if (helper(cur, p)) res.add(i);
        }
        return res;
    }
    
    public boolean helper(String s, String t) {
        // write your code here
        int[] cntS = new int[256];
        int[] cntT = new int[256];
        for (char c : s.toCharArray()) {
            cntS[c]++;
        }
        for (char c : t.toCharArray()) {
            cntT[c]++;
        }
        for (int i = 0; i < 256; i++) {
            if (cntS[i] != cntT[i]) {
                return false;
            }
        }
        return true;
    }
}

//sliding window


