考虑corner case

641. Missing Ranges
中文English
Given a sorted integer array where the range of elements are in the inclusive range [lower, upper], return its missing ranges.

Example
Example 1

Input:
nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99
Output:
["2", "4->49", "51->74", "76->99"]
Explanation:
in range[0,99],the missing range includes:range[2,2],range[4,49],range[51,74] and range[76,99]
Example 2

Input:
nums = [0, 1, 2, 3, 7], lower = 0 and upper = 7
Output:
["4->6"]
Explanation:
in range[0,7],the missing range include range[4,6]


https://www.lintcode.com/problem/missing-ranges/description

public class Solution {
    /*
     * @param nums: a sorted integer array
     * @param lower: An integer
     * @param upper: An integer
     * @return: a list of its missing ranges
     */
    public List<String> findMissingRanges(int[] nums, int lower, int upper) {
        List<String> result = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            result.add(getRange(lower, upper));
            return result;
        }
        if (nums[0] > lower) {
            result.add(getRange(lower, nums[0]-1));
        }
        for (int i = 1 ; i < nums.length ; i++) {
            //corner case
            //会超过最大界限
            long diff = (long)nums[i] - (long)nums[i-1];
            if (diff > 1L) {
                result.add(getRange(nums[i-1]+1, nums[i]-1));
            }
        }
        if (nums[nums.length-1] < upper) {
            result.add(getRange(nums[nums.length-1]+1, upper));
        }
        return result;
    }
    
    private String getRange(int from, int to) {
        if (from == to) {
            return String.valueOf(from);
        } else {
            return from + "->" + to;
        }
    }
}



follow up:
315. Summary Ranges
中文English
Given a sorted integer array without duplicates, return the summary of its ranges.

Example
Example1

Input: [0,1,2,4,5,7]
Output: ["0->2","4->5","7"]
Example2

Input: [0,2,3,4,6,8,9]
Output: ["0","2->4","6","8->9"]
Notice
The result is in ascending order


class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        }
        
        int j = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i - 1] + 1 == nums[i]) {
                continue;
            }
            addRange(res, nums[j], nums[i - 1]);
            j = i;
        }
        addRange(res, nums[j], nums[nums.length - 1]);
        return res;
    }
    
    private List<String> addRange(List<String> res, 
                                  int start, int end) {
        if (start > end) {
            return res;
        } else if (start == end) {
            res.add(start + "");
        } else {
            res.add(start + "->" + end);
        }
        return res;
    }
}
